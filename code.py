# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dBGFVg2MP8H-9F-0WL3YoFlp72yPlPuE
"""

from sklearn.metrics import confusion_matrix,accuracy_score,recall_score,precision_score,f1_score,fbeta_score,classification_report
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from imblearn.over_sampling import SMOTE
from xgboost import XGBClassifier
from sklearn.svm import SVC
import seaborn as sns
import pandas as pd
import numpy as np
import sklearn
import imblearn
import keras

df = pd.read_csv('heart_disease_health_indicators_BRFSS2015.csv')
df.head()

df.info()

for elm in df:
    print(df[elm].value_counts())

df.isnull().sum()

df.describe()

df['Age'] = df['Age']*4
df

df.shape

df['Age'].max()

df['Age'].min()

sns.distplot(df["Age"],hist=True, kde=False, color='red')

sns.countplot(x='Sex', data=df, hue='Smoker')

sns.countplot(x='Smoker', data=df, hue='HeartDiseaseorAttack')

sns.countplot(x='Smoker', data=df, hue='Diabetes')

sns.countplot(x='Smoker', data=df, hue='Stroke')

sns.countplot(x='Diabetes', data=df, hue='Sex')

sns.countplot(x='PhysActivity', data=df, hue='Sex')

sns.countplot(x='PhysActivity', data=df, hue='HeartDiseaseorAttack')

sns.countplot(x='PhysActivity', data=df, hue='Diabetes')

sns.distplot(df["Education"], kde=False, color='Blue')

sns.distplot(df['Income'], kde=False, color='Blue')

sns.distplot(df['Income'], kde=False, color='Blue')

sns.countplot(x='Fruits', data=df, hue='Diabetes')

sns.countplot(x='Fruits', data=df, hue='HeartDiseaseorAttack')

sns.countplot(x='Veggies', data=df, hue='Sex')

sns.countplot(x='Veggies', data=df, hue='Diabetes')

sns.countplot(x='Veggies', data=df, hue='HeartDiseaseorAttack')

sns.distplot(df['BMI'], kde=False)

sns.countplot(x='BMI', data=df, hue='HeartDiseaseorAttack')

sns.countplot(x='BMI', data=df, hue='Diabetes')

sns.countplot(x='AnyHealthcare', data=df, hue='HeartDiseaseorAttack')

sns.countplot(x='AnyHealthcare', data=df, hue='Diabetes')

sns.countplot(x='AnyHealthcare', data=df, hue='Stroke')

x=df.drop(['HeartDiseaseorAttack', 'Education', 'Income'], axis=1)
y=df['HeartDiseaseorAttack']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)
y_train.value_counts()

sampler=SMOTE()
x_train,y_train=sampler.fit_resample(x_train,y_train)
y_train.value_counts()

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.transform(x_test)
x_train

models={
    'LR':LogisticRegression(),
    'KNN':KNeighborsClassifier(),
    'DT':DecisionTreeClassifier(),
    'SVC':SVC(),
    'NB':GaussianNB(),
    'XGC':XGBClassifier(),
    'RF':RandomForestClassifier()
    
}

from sklearn.impute import SimpleImputer

imputer = SimpleImputer(strategy='mean')
x_train = imputer.fit_transform(x_train)
x_test = imputer.transform(x_test)


for name,model in  models.items():
    print(f'using {name}: ')
    history = model.fit(x_train,y_train)
    y_pred=model.predict(x_test)
    print(f'Training Accuracy :{accuracy_score(y_train,model.predict(x_train))}')
    print(f'Testing Accuracy :{accuracy_score(y_test,y_pred)}')
    print(f'Confusion matrix:\n {confusion_matrix(y_test,y_pred)}')
    print(f'Recall: {recall_score(y_test,y_pred)}')
    print(f'precision: {precision_score(y_test,y_pred)}')
    print(f'F1-score: {f1_score(y_test,y_pred)}')
    print(f'Fbeta-score: {fbeta_score(y_test,y_pred,beta=0.5)}')
    print(classification_report(y_test,y_pred))
    print('-'*33)

model=RandomForestClassifier()
history = model.fit(x_train,y_train)

from sklearn.metrics import accuracy_score, precision_score, recall_score

# Make predictions on the test set
y_pred = model.predict(x_test)

# Calculate evaluation metrics
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

# Print the evaluation metrics
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)

import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Initialize the RandomForestClassifier
model = RandomForestClassifier()

accuracy_scores = []
a=1
b=1
for name,model in  models.items():
    b=b+1
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
    accuracy = accuracy_score(y_test, y_pred)
    accuracy_scores.append(accuracy)

# Plot the accuracy scores
plt.plot(range(a,b), accuracy_scores)
plt.xlabel('Iteration')
plt.ylabel('Accuracy')
plt.show()